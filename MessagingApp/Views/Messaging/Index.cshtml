@model IEnumerable<MessagingApp.Models.Message>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userNames = ViewBag.UserNames as Dictionary<int, string>;
    int loggedInUserId = int.Parse(User.FindFirst("UserId").Value);
    string loggedInUserName = User.Identity.Name;
    string studentName = ViewBag.StudentName as string;
    int conversationId = (int)ViewBag.ConversationId;
}
<div class="container-fluid">
    <div class="row">
        <!-- Sidebar for Active Conversations -->
        <div class="col-md-3">
            @Html.Partial("_ConversationList")
        </div>

        <!--
            Thisis the Messaging view for displaying and sending messages
            This view renders the messaging interface and handles client-side operations such as
            sending, editing, and deleting messages via SignalR.
        -->

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8" />
            <title>Messaging - MessagingApp</title>
            <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
            <!-- SignalR client library -->
            <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
            <!-- FontAwesome for icons -->
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
        </head>
        <body>
            <div class="message-container">
                <h2 class="message-header-title">Messaging with @studentName</h2>
                <div class="message-list" id="messageList">
                    @if (Model != null && Model.Any())
                    {
                        foreach (var message in Model.Reverse())
                        {
                            bool isSentByUser = message.SenderId == loggedInUserId;
                            <div class="message-wrapper @(isSentByUser ? "sent" : "received")" data-message-id="@message.Id">
                                <div class="message-header">
                                    <small class="message-info">
                                        @(userNames.ContainsKey(message.SenderId) ? userNames[message.SenderId] : "Unknown")
                                        - @message.Timestamp.ToShortTimeString()
                                        @Html.Raw(message.IsEdited ? " <span class=\"edited-label\">(edited)</span>" : "")
                                    </small>
                                    @if (isSentByUser)
                                    {
                                        <div class="message-actions">
                                            <i class="fas fa-edit edit-icon" title="Edit"></i>
                                            <i class="fas fa-trash delete-icon" title="Delete"></i>
                                        </div>
                                    }
                                </div>
                                <div class="message @(isSentByUser ? "sent-message" : "received-message")">
                                    @message.Content
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <p>No messages available.</p>
                    }
                </div>

                <form class="add-message-form" id="messageForm" method="post" asp-action="AddMessage" asp-controller="Messaging">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="studentId" value="@ViewBag.StudentId" />
                    <input type="hidden" name="studentName" value="@studentName" />
                    <input type="hidden" name="conversationId" value="@conversationId" />
                    <textarea name="content" id="contentInput" class="message-textarea" placeholder="Type your message here..." required></textarea>
                    <button type="submit" class="send-btn">
                        <i class="fas fa-paper-plane"></i>
                    </button>

                </form>
            </div>

            <!-- Modal Confirmation for deletion -->
            <div class="modal-overlay" id="confirmModal">
                <div class="modal-content">
                    <h2>Confirm Deletion</h2>
                    <p>Are you sure you want to delete this message?</p>
                    <button class="btn-confirm" id="confirmDeleteBtn">Yes, Delete</button>
                    <button class="btn-cancel" id="cancelDeleteBtn">Cancel</button>
                </div>
            </div>


    <script>
        //Global variable to store the message ID pending deletion
        let pendingDeleteMessageId = null;

        window.onload = function () {
            var messageList = document.getElementById("messageList");
            messageList.scrollTop = 0;
        };

        // Initialize SignalR connection.
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().then(() => {
            console.log("Connected to SignalR hub.");
            // Join the conversation group (using the conversationId from  the page
            connection.invoke("JoinConversation", @conversationId)
                .catch(err => console.error(err.toString()));
        }).catch(err => console.error("SignalR Connection Error: ", err.toString()));

        /// <summary>
        /// Handles receiving new message
        /// Appends the message to the message list
        /// </summary>
                connection.on("ReceiveMessage", (senderId, senderName, message, timestamp, messageId) => {
                    const messageList = document.getElementById("messageList");
                    const noMsg = messageList.querySelector("p");
                    if (noMsg && noMsg.innerText.trim() === "No messages available.") {
                        noMsg.remove();
                    }

                    const isSentByUser = senderId == @loggedInUserId;
                    const wrapper = document.createElement("div");
                    wrapper.className = "message-wrapper " + (isSentByUser ? "sent" : "received");
                    wrapper.setAttribute("data-message-id", messageId);

                    let headerHtml = `<div class="message-header">
                                                <small class="message-info">${senderName} - ${timestamp}</small>`;
                    if (isSentByUser) {
                        headerHtml += `<div class="message-actions">
                                                <i class="fas fa-edit edit-icon" title="Edit"></i>
                                                <i class="fas fa-trash delete-icon" title="Delete"></i>
                                           </div>`;
                    }
                    headerHtml += `</div>`;
                    wrapper.innerHTML = headerHtml +
                        `<div class="message ${isSentByUser ? "sent-message" : "received-message"}">${message}</div>`;

                    // Instead of appending, insert the new message at the beginning of the container.
                    messageList.insertBefore(wrapper, messageList.firstChild);
            // Use a short delay to ensure layout is updated, then reset scrollTop to 0.
                    setTimeout(() => {
                        messageList.scrollTop = 0;
                    }, 10);

                    // If the message comes from other user in chat, mark it as read
                    if (!isSentByUser) {
                        connection.invoke("MarkMessagesAsRead", @loggedInUserId, @conversationId)
                            .catch(err => console.error(err.toString()));
                    }
                });


        /// <summary>
        /// Intercepts the message form submission to send a new message via SignalR
        /// Prevents the default form behavior, sends the message, and clears the input field
        /// </summary>
        document.getElementById("messageForm").addEventListener("submit", function (event) {
            event.preventDefault();
            cancelActiveEdits();
            const contentInput = document.getElementById("contentInput");
            if (contentInput.value.trim() === "") return;
            const convId = parseInt(document.querySelector('input[name="conversationId"]').value, 10);
            connection.invoke("SendMessage", @loggedInUserId, "@loggedInUserName", contentInput.value, convId)
                .catch(err => console.error(err.toString()));
            contentInput.value = "";
        });

                //refresh the conversation list.
                connection.on("UpdateConversations", () => {
                    if (typeof updateConversations === "function") {
                        updateConversations();
                    } else {
                        console.log("updateConversations function not found.");
                    }
                });


        // Helper: Cancel any active edit inputs.
        function cancelActiveEdits() {
            const activeInputs = document.querySelectorAll(".message-wrapper input[type='text']");
            activeInputs.forEach(input => {
                const parentDiv = input.parentElement;
                if (parentDiv.dataset.originalText) {
                    parentDiv.innerText = parentDiv.dataset.originalText;
                } else {
                    parentDiv.innerText = input.value;
                }
            });
        }
        /// <summary>
        /// Delegates the click events on the message list for editing or deleting messages
        /// Opens the deletion confirmation modal or transforms the message into an inline editor.
        /// </summary>
        document.getElementById("messageList").addEventListener("click", function (event) {
            const target = event.target;
            const wrapper = target.closest(".message-wrapper");
            if (!wrapper) return;
            const messageId = parseInt(wrapper.getAttribute("data-message-id"), 10);

            // Delete action: open the custom modal confirmation.
            if (target.classList.contains("delete-icon")) {
                pendingDeleteMessageId = messageId;
                document.getElementById("confirmModal").style.display = "flex";
            }

            // Edit action.
            if (target.classList.contains("edit-icon")) {
                const messageDiv = wrapper.querySelector(".message");
                const originalText = messageDiv.innerText;
                if (messageDiv.querySelector("input")) return;
                const input = document.createElement("input");
                input.type = "text";
                input.value = originalText;
                input.style.width = "80%";
                messageDiv.dataset.originalText = originalText;
                messageDiv.innerHTML = "";
                messageDiv.appendChild(input);
                input.focus();

                let editSaved = false;
                function saveEdit() {
                    const newContent = input.value.trim();
                    if (newContent === "" || newContent === originalText) {
                        cancelEdit();
                        return;
                    }
                    editSaved = true;
                    input.removeEventListener("blur", onBlur);
                    connection.invoke("EditMessage", messageId, newContent)
                        .catch(err => console.error(err.toString()));
                }
                function cancelEdit() {
                    messageDiv.innerText = originalText;
                }
                function onBlur() {
                    setTimeout(() => {
                        if (!editSaved) cancelEdit();
                    }, 300);
                }
                input.addEventListener("keydown", function (e) {
                    if (e.key === "Enter") {
                        e.preventDefault();
                        saveEdit();
                        input.blur();
                    } else if (e.key === "Escape") {
                        e.preventDefault();
                        cancelEdit();
                    }
                });
                input.addEventListener("blur", onBlur);
                const saveIcon = document.createElement("i");
                saveIcon.className = "fas fa-check";
                saveIcon.style.cursor = "pointer";
                saveIcon.title = "Save";
                const cancelIcon = document.createElement("i");
                cancelIcon.className = "fas fa-times";
                cancelIcon.style.cursor = "pointer";
                cancelIcon.title = "Cancel";
                messageDiv.appendChild(saveIcon);
                messageDiv.appendChild(cancelIcon);
                saveIcon.addEventListener("click", saveEdit);
                cancelIcon.addEventListener("click", cancelEdit);
            }
        });

        /// <summary>
        /// Handles the confirmation of message deletion
        /// Invokes the DeleteMessage method on the SignalR hub and hides the modal
        /// </summary>
        document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
            if (pendingDeleteMessageId != null) {
                connection.invoke("DeleteMessage", pendingDeleteMessageId)
                    .catch(err => console.error(err.toString()));
                document.getElementById("confirmModal").style.display = "none";
                pendingDeleteMessageId = null;
            }
        });
        document.getElementById("cancelDeleteBtn").addEventListener("click", function () {
            document.getElementById("confirmModal").style.display = "none";
            pendingDeleteMessageId = null;
        });

        // Handle MessageEdited event.
        // Handle MessageEdited event to update the UI (edited marker persists)
        connection.on("MessageEdited", (messageId, newContent, timestamp) => {
            const wrapper = document.querySelector(`.message-wrapper[data-message-id='${messageId}']`);
            if (wrapper) {
                // Update the message content
                const messageDiv = wrapper.querySelector(".message");
                messageDiv.innerText = newContent;
                // Update the header info: extract the sender name from existing info
                const infoEl = wrapper.querySelector(".message-info");
                // We assume the infoEl text is in the format "SenderName - oldTimestamp"
                let parts = infoEl.innerText.split("-");
                let senderName = parts[0].trim();
                // Replace header with new timestamp and the persistent (edited) marker
                infoEl.innerHTML = `${senderName} - ${timestamp} <span class="edited-label">(edited)</span>`;
            }
        });

        // Handle MessageDeleted event.
        connection.on("MessageDeleted", (messageId) => {
            const wrapper = document.querySelector(`.message-wrapper[data-message-id='${messageId}']`);
            if (wrapper) {
                const infoEl = wrapper.querySelector(".message-info");
                let senderName = "User";
                if (infoEl && infoEl.innerText.indexOf(" - ") !== -1) {
                    senderName = infoEl.innerText.split(" - ")[0];
                }
                wrapper.innerHTML = `<div class="deleted-message">${senderName} deleted a message</div>`;
            }
        });
        //Edit and delete icons on message bubbles Listen for a click even for mobile phones instead of hover
        document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".message-wrapper").forEach(wrapper => {
        wrapper.addEventListener("click", function (event) {
            if (event.target.closest(".message-actions")) return;

            // Close all other open message actions
            document.querySelectorAll(".message-wrapper.show-actions").forEach(el => {
                if (el !== this) el.classList.remove("show-actions");
            });

            this.classList.toggle("show-actions");
        });
    });
});

                const textarea = document.getElementById("contentInput");

                textarea.addEventListener("input", function () {
                    this.style.height = "auto";
                    this.style.height = this.scrollHeight + "px";

                    // This makes scrool bar only appear after 5 lines (roughly 5 * line-height)
                    const lineHeight = parseFloat(getComputedStyle(this).lineHeight);
                    if (this.scrollHeight > lineHeight * 5) {
                        this.style.overflowY = "auto";
                    } else {
                        this.style.overflowY = "hidden";
                    }
                });
 </script>
 </body>
</html>
